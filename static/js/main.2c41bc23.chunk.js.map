{"version":3,"sources":["../node_modules/typescript/lib sync","components/graphical/graphManipulatio.js","components/simple_graphs/BaseImplementations.ts","components/graphical/nodes.js","components/graphical/utils/StateMachine.js","components/graphical/graphical.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","canvas","selected","line","BaseNode","identifier","data","this","BaseConnection","n0","n1","node0","node1","Graph","nodes","connections","inboundConnections","id1","cons","res","v2","push","id2","vertex","createConnection","icons","i","disconnect","connect","deleteV","other","nodeCount","Node","x","y","graph","radius","fill","top","left","hasBorders","hasControls","node","n","addV","tokens","centreX","centreY","add","color","length","circle","fabric","Circle","_updateTokens","forEach","c","number","findIndex","filter","_","index","aCoords","tl","br","getCentre","setCoords","set","Math","sin","PI","cos","bringToFront","renderAll","State","handlers","events","handler","event","eventParams","keyPressed","createNode","gn","includes","Rect","width","height","isRect","nn","createLine","x1","y1","x2","y2","triangle","Triangle","angle","atan","hasas","evented","selectable","Line","stroke","deleteLine","remove","adjastMousePointer","pointer","floor","moveToken","token","line2","frame","move","sqrt","ang","atan2","states","reduce","acc","state","on","target","find","newNode","end","console","log","tId","sId","key","simulation","addToken","sendToBack","Object","entries","createCircle","step1","result","vertexColors","vertex2","every","greatMove","dest","a","Promise","interval","setInterval","clearInterval","associations","dests","map","arr","indexOf","all","removeToken","flat","initializeEvents","_canvas","currentState","pass","document","onkeydown","onkeyup","val","Graphical","useEffect","newCanvas","initCanvas","graphManipulations","Canvas","backgroundColor","selection","preserveObjectStacking","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"sGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,yOCDrBC,EACAC,EACAC,E,2HCPSC,EAGT,aAA4C,IAAhCC,EAA+B,uDAAb,GAAGC,EAAU,gEAF3CD,gBAE2C,OAD3CC,UAC2C,EACvCC,KAAKF,WAAWA,EAChBE,KAAKD,KAAKA,GAGLE,EAKT,WAAYC,EAAYC,EAAYJ,GAAW,yBAH/CK,WAG8C,OAF9CC,WAE8C,OAD9CN,UAC8C,EAC1CC,KAAKI,MAAMF,EACXF,KAAKK,MAAMF,EACXH,KAAKD,KAAKA,GAoELO,EAAb,sKACI,SAAiBJ,EAAYC,EAAYJ,GACrC,OAAO,IAAIE,EAAeC,EAAGC,EAAGJ,OAFxC,GAhEA,iDACWQ,MAA2B,GADtC,KAEWC,YAAmD,GAF9D,KAGWC,mBAA0D,GAHrE,8CAKI,SAAWC,GACP,IAAIC,EAAOX,KAAKQ,YAChB,KAAKE,KAAOC,GAAM,MAAO,GACzB,IAAIC,EAAa,GACjB,IAAI,IAAIC,KAAMF,EAAKD,GAAKE,EAAIE,KAAKd,KAAKO,MAAMM,IAC5C,OAAOD,IAVf,uBAYI,SAAUF,EAAWK,GACjB,IAAIJ,EAAOX,KAAKQ,YAChB,OAAKE,KAAOC,KACHA,EAAKD,GAAKK,KAf3B,2BAiBI,SAAcL,EAAWK,GACrB,IAAIJ,EAAOX,KAAKQ,YAChB,OAAKE,KAAOC,EACLA,EAAKD,GAAKK,GADQ,OAnBjC,qBAuBI,SAAQL,GACJ,IAAIC,EAAOX,KAAKQ,YACXE,KAAOV,KAAKO,eACVP,KAAKO,MAAMG,UACXC,EAAKD,MA3BpB,kBA6BI,SAAKM,GACDhB,KAAKO,MAAMS,EAAOlB,YAAYkB,IA9BtC,qBAiCI,SAAQN,EAAWK,EAAWhB,GACrBW,KAAOV,KAAKO,OAASQ,KAAOf,KAAKO,QACtCP,KAAKQ,YAAYO,GAAOf,KAAKQ,YAAYO,IAAQ,GACjDf,KAAKQ,YAAYE,GAAOV,KAAKQ,YAAYE,IAAQ,GACjDV,KAAKQ,YAAYE,GAAKK,GAAKf,KAAKiB,iBAAiBjB,KAAKO,MAAMG,GAAKV,KAAKO,MAAMQ,GAAKhB,GACjFC,KAAKS,mBAAmBM,GAAOf,KAAKS,mBAAmBM,IAAQ,GAC/Df,KAAKS,mBAAmBC,GAAOV,KAAKS,mBAAmBC,IAAQ,GAC/DV,KAAKS,mBAAmBM,GAAKL,GAAKV,KAAKQ,YAAYE,GAAKK,MAxChE,wBA2CI,SAAWL,EAAWK,GAClB,IAAIJ,EAAOX,KAAKQ,YACXE,KAAOC,GAAQI,KAAOJ,EAAKD,YACzBV,KAAKQ,YAAYE,GAAKK,UACtBf,KAAKS,mBAAmBM,GAAKL,MA/C5C,sBAkDI,SAASA,EAAWK,GAChB,IAAIJ,EAAOX,KAAKQ,YACZU,EAAQlB,KAAKS,mBACjB,GAAKC,KAAOC,GAAQI,KAAOJ,EAAKD,GAAhC,CAGA,IAAI,IAAIS,KAFRnB,KAAKoB,WAAWV,EAAIK,GACpBf,KAAKoB,WAAWL,EAAIL,GACPC,EAAKI,GAAKf,KAAKqB,QAAQX,EAAIS,GACxC,IAAI,IAAIA,KAAKD,EAAMH,GAAKf,KAAKqB,QAAQF,EAAET,GACvCV,KAAKsB,QAAQP,MA1DrB,iBA4DI,SAAIQ,GACA,OAAO,MA7Df,M,qBCnBIC,EAAY,IAWHC,EAAb,kDACI,WAAYC,EAAGC,EAAGC,EAAOlC,GAAS,IAAD,8BAC7B,cAAM,CACFmC,OAAQ,GACRC,KAAM,QACNC,IAAKJ,EAAI,GACTK,KAAMN,EAAI,GACVO,YAAY,EACZC,aAAa,KAEZC,KAAO,IAAItC,EAAS2B,IAAa,CAAEE,IAAGC,IAAGS,EAAE,iBAChDR,EAAMS,KAAK,EAAKF,MAChB,EAAKG,OAAS,GACd,EAAKC,QAAUb,EACf,EAAKc,QAAUb,EACf,EAAKjC,OAASA,EACdA,EAAO+C,IAAP,gBAf6B,EADrC,4CAkBI,WAAmB,IAAD,OAATC,EAAS,uDAAH,EACe,GAAtB1C,KAAKsC,OAAOK,SAChB3C,KAAKsC,OAAOxB,KAAK,CACb8B,OAAQ,IAAIC,SAAOC,OAAO,CACtBjB,OAAQ,EACRC,KAAK,OAAD,OAAU,GAAGY,EAAO,GAApB,YAA2B,KAAKA,EAAM,GAAI,GAA1C,YAAiD,KAAKA,EAAM,GAAI,GAAhE,KACJX,IAAK,GACLC,KAAM,KAKVU,UAEJ1C,KAAK+C,gBACL/C,KAAKsC,OAAOU,SAAQ,gBAAGJ,EAAH,EAAGA,OAAH,OAAgB,EAAKlD,OAAO+C,IAAIG,SAjC5D,yBAmCI,SAAYK,GACR,IAAMC,EAASlD,KAAKsC,OAAOa,WAAU,gBAAET,EAAF,EAAEA,MAAF,OAAWO,GAAGP,KACnD1C,KAAKsC,OAAStC,KAAKsC,OAAOc,QAAO,SAACC,EAAGC,GAAJ,OAAcA,GAASJ,OArChE,2BAuCI,WAAiB,IAAD,OACZ,EAjDU,SAACN,GACf,MAAiBA,EAAOW,QAAlBC,EAAN,EAAMA,GAAIC,EAAV,EAAUA,GACV,MAAO,EACFD,EAAG9B,EAAI+B,EAAG/B,GAAK,GACf8B,EAAG7B,EAAI8B,EAAG9B,GAAK,GA6CD+B,CAAU1D,MAAzB,mBAAO0B,EAAP,KAAUC,EAAV,KACA3B,KAAK2D,YACL3D,KAAKsC,OAAOU,SAAQ,WAAa7B,GAAO,IAAjByB,EAAgB,EAAhBA,OACnBA,EAAOgB,IAAI,CACP5B,KAAMN,EAAI,EAAuD,GAAnDmC,KAAKC,IAAI,EAAID,KAAKE,GAAK5C,EAAK,EAAKmB,OAAOK,QACtDZ,IAAKJ,EAAI,EAAuD,GAAnDkC,KAAKG,IAAI,EAAIH,KAAKE,GAAK5C,EAAK,EAAKmB,OAAOK,UACtDgB,YAEH,EAAKjE,OAAOuE,aAAarB,GACzB,EAAKlD,OAAOwE,mBAjDxB,GAA0BrB,SAAOC,QCdpBqB,EAAb,iDACIC,SAAU,GADd,sCAEI,SAAGC,EAAOC,GAAS,IAAD,OACdD,EAAOrB,SAAQ,SAAAuB,GACX,EAAKH,SAASG,GAASD,OAJnC,kBAOI,SAAKC,EAAMC,GAEP,OAAIxE,KAAKoE,SAASG,IACXvE,KAAKoE,SAASG,GAAOC,IADIxE,SATxC,KHKI4B,EAAQ,IAAItB,EACZkB,EAAY,EAIZiD,EAAa,GACXC,EAAa,SAAChD,EAAGC,GACnB,IAAIgD,EAAKF,EAAWG,SAAS,KACzB,IAAI/B,SAAOgC,KAAK,CACZC,MAAO,GACPC,OAAQ,GACRjD,KAAM,MACNC,IAAKJ,EAAI,GACTK,KAAMN,EAAI,GACVO,YAAY,EACZC,aAAa,IAEjB,IAAIT,EAAKC,EAAGC,EAAGC,EAAOlC,GAE1B,GADAiF,EAAGK,OAASP,EAAWG,SAAS,KAC5BD,EAAGK,OAAQ,CACX,IAAIC,EAAK,IAAIpF,EAAS2B,IAAa,CAAEE,IAAGC,IAAGQ,KAAKwC,IAChD/C,EAAMS,KAAK4C,GACXN,EAAGxC,KAAO8C,EAId,OAFAN,EAAGrC,OAAS,GACZ5C,EAAO+C,IAAIkC,GACJA,GAGLO,EAAa,SAAC,EAAkBxC,GAAW,IAAD,mBAA3ByC,EAA2B,KAAvBC,EAAuB,KAAnBC,EAAmB,KAAfC,EAAe,KACxCC,EAAW,IAAI1C,SAAO2C,SAAS,CAC/BV,MAAO,GACPC,OAAQ,GACRjD,KAAK,OAAD,OAAU,GAAGY,EAAO,GAApB,YAA2B,KAAKA,EAAM,GAAI,GAA1C,YAAiD,KAAKA,EAAM,GAAI,GAAhE,KACJV,KAAMqD,EACNtD,IAAKuD,EACLG,MAA0C,IAAnC5B,KAAK6B,MAAML,EAAKF,IAAOG,EAAKF,IAAavB,KAAKE,GACrD9B,YAAY,EACZ0D,OAAO,EACPC,SAAS,EACTC,YAAY,IAEVjG,EAAO,IAAIiD,SAAOiD,KAAK,CAACX,EAAIC,EAAIC,EAAIC,GAAK,CAC3CS,OAAO,OAAD,OAAU,GAAGrD,EAAO,GAApB,YAA2B,KAAKA,EAAM,GAAI,GAA1C,YAAiD,KAAKA,EAAM,GAAI,GAAhE,KACNT,YAAY,EACZ0D,OAAO,EACPC,SAAS,EACTC,YAAY,IAMhB,OAJAjG,EAAK2F,SAAWA,EAChB3F,EAAK8C,MAAQA,GAAO,EACpBhD,EAAO+C,IAAI7C,GACXF,EAAO+C,IAAI8C,GACJ3F,GAGL8D,EAAY,SAACd,GACf,MAAiBA,EAAOW,QAAlBC,EAAN,EAAMA,GAAIC,EAAV,EAAUA,GACV,MAAO,EACFD,EAAG9B,EAAI+B,EAAG/B,GAAK,GACf8B,EAAG7B,EAAI8B,EAAG9B,GAAK,IAIlBqE,EAAa,WACXpG,IACAF,EAAOuG,OAAOrG,EAAK2F,UACnB7F,EAAOuG,OAAOrG,GAAMsE,aAExBtE,EAAO,MAELsG,EAAqB,SAACC,GACxB,MAAO,CAACtC,KAAKuC,MAAMD,EAAQzE,GAAK,EAAGmC,KAAKuC,MAAMD,EAAQxE,GAAK,IAGzD0E,EAAY,SAACC,EAAOC,EAAOC,GAC7B,IAAMrB,EAAKoB,EAAMpB,GACXE,EAAKkB,EAAMlB,GACXD,EAAKmB,EAAMnB,GACXE,EAAKiB,EAAMjB,GAEXmB,EADM5C,KAAK6C,MAAMrB,EAAKF,IAAOE,EAAKF,IAAOG,EAAKF,IAAOE,EAAKF,IAC7C,IAAMoB,EACnBG,EAAM9C,KAAK+C,MAAOtB,EAAKF,EAAMC,EAAKF,GACxCmB,EAAM1C,IAAI,CACN7B,IAAK0E,EAAO5C,KAAKC,IAAI6C,GAAO,EAAI9C,KAAKG,IAAI2C,GAAOvB,EAChDpD,KAAMyE,EAAO5C,KAAKG,IAAI2C,GAAO,EAAI9C,KAAKC,IAAI6C,GAAOxB,IAClDxB,YACHjE,EAAOwE,aAWL2C,EANc,CAChB,oBACA,qBACA,iBACA,eAEuBC,QAAO,SAACC,EAAKC,GAEpC,OADAD,EAAIC,GAAS,IAAI7C,EACV4C,IACR,IAIHF,EAAM,kBAAsBI,GAAG,CAAC,eAAgB,YAAa,kBAAkB,YAA0B,IAAvBd,EAAsB,EAAtBA,QAASe,EAAa,EAAbA,OAMvF,OAHAvH,EAAWuH,KACIvH,EAAW+E,EAAWb,KAAKuC,MAAMD,EAAQzE,GAAImC,KAAKuC,MAAMD,EAAQxE,KAC/E/B,EAAOsF,EAAW,GAAD,mBAAKxB,EAAU/D,IAAf,CAA0BkE,KAAKuC,MAAMD,EAAQzE,GAAK,EAAGmC,KAAKuC,MAAMD,EAAQxE,GAAK,IAAI8C,EAAW0C,MAAK,SAAAzF,GAAC,OAAIA,GAAK,KAAOA,GAAK,QACjImF,EAAM,sBAGjBA,EAAM,mBAAuBI,GAAG,CAAC,iBAAiB,YAAyB,EAAtBC,OAAuB,IAAff,EAAc,EAAdA,QACzD,GAAKxG,EAASqF,SAAWP,EAAWG,SAAS,OAAWjF,EAASqF,QAAUP,EAAWG,SAAS,KAAO,CAClG,IAAIwC,EAAU1C,EAAU,WAAV,cAAcwB,EAAmBC,KAE/C,EAAezC,EAAU0D,GAAzB,mBAAO1F,EAAP,KAAUC,EAAV,KAEA/B,EAAKyH,IAAMD,EAAQjF,KAAKrC,WACxBF,EAAKgE,IAAI,CAAEyB,GAAI3D,EAAG4D,GAAI3D,IAAKgC,YAC3B,IAAMwB,EAAKvF,EAAKuF,GACVC,EAAKxF,EAAKwF,GAEVuB,EAAM9C,KAAK+C,MAAOjF,EAAIyD,EAAM1D,EAAIyD,GACtCvF,EAAK2F,SAAS3B,IAAI,CACd5B,KAAMN,EAAI,EAAImC,KAAKC,IAAI6C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKG,IAAI2C,GAAO,GAAmC9C,KAAKG,IAAI2C,IACpI5E,IAAKJ,EAAI,EAAIkC,KAAKG,IAAI2C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKC,IAAI6C,GAAO,GAAK9C,KAAKC,IAAI6C,IACrGlB,MAAa,IAANkB,EAAY9C,KAAKE,GAAK,KAC9BJ,YAGH/B,EAAMP,QAAQ1B,EAASwC,KAAKrC,WAAYsH,EAAQjF,KAAKrC,WAAY,CAC7DF,SAGJF,EAAOwE,YACPvE,EAAWyH,EACXxH,EAAOsF,EAAW,GAAD,mBAAKxB,EAAU/D,IAAf,CAA0BkE,KAAKuC,MAAMD,EAAQzE,GAAK,EAAGmC,KAAKuC,MAAMD,EAAQxE,GAAK,IAAI8C,EAAW0C,MAAK,SAAAzF,GAAC,OAAIA,GAAK,KAAOA,GAAK,YAGhJmF,EAAM,mBAAuBI,GAAG,CAAC,cAAc,YAAiB,IAAdC,EAAa,EAAbA,OAE9C,GADAI,QAAQC,IAAI,GACP5H,EAASqF,SAAWkC,EAAOlC,SAAarF,EAASqF,QAAUkC,EAAOlC,OAAS,CAC5E,MAAetB,EAAUwD,GAAzB,mBAAOxF,EAAP,KAAUC,EAAV,KACM6F,EAAMN,EAAO/E,KAAKrC,WAClB2H,EAAM9H,EAASwC,KAAKrC,WAC1B,GAAI8B,EAAMpB,YAAYgH,IAAQC,KAAO7F,EAAMpB,YAAYgH,GAKnD,OAJAxB,IACAtG,EAAOuG,OAAOrE,EAAMpB,YAAYgH,GAAKC,GAAK1H,KAAKH,MAC/CF,EAAOuG,OAAOrE,EAAMpB,YAAYgH,GAAKC,GAAK1H,KAAKH,KAAK2F,UACpD3D,EAAMR,WAAWoG,EAAKC,GACfZ,EAAM,kBAEjB,GAAIjF,EAAMnB,mBAAmB+G,IAAQC,KAAO7F,EAAMnB,mBAAmB+G,GAEjE,OADAxB,IACOa,EAAM,kBAGjBjH,EAAKyH,IAAMH,EAAO/E,KAAKrC,WAEvBF,EAAKgE,IAAI,CAAEyB,GAAI3D,EAAG4D,GAAI3D,IAAKgC,YAC3B,IAAMwB,EAAKvF,EAAKuF,GACVC,EAAKxF,EAAKwF,GACVuB,EAAM9C,KAAK+C,MAAOjF,EAAIyD,EAAM1D,EAAIyD,GAYtC,OAXAvF,EAAK2F,SAAS3B,IAAI,CACd5B,KAAMN,EAAI,EAAImC,KAAKC,IAAI6C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKG,IAAI2C,GAAO,GAAmC9C,KAAKG,IAAI2C,IACpI5E,IAAKJ,EAAI,EAAIkC,KAAKG,IAAI2C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKC,IAAI6C,GAAO,GAAK9C,KAAKC,IAAI6C,IACrGlB,MAAa,IAANkB,EAAY9C,KAAKE,GAAK,KAC9BJ,YAEHjE,EAAOwE,YAEPtC,EAAMP,QAAQ1B,EAASwC,KAAKrC,WAAYoH,EAAO/E,KAAKrC,WAAY,CAC5DF,SAEGiH,EAAM,sBAGrBA,EAAM,kBAAsBI,GAAG,CAAC,gBAAgB,YAChC,MAD6C,EAAVS,K,mCAE3CC,MAGRd,EAAM,mBAAuBI,GAAG,CAAC,gBAAgB,YACjC,MAD8C,EAAVS,KAExC/H,EAASiI,UAAUjI,EAASiI,SAASnD,EAAW0C,MAAK,SAAAzF,GAAC,OAAIA,GAAK,KAAOA,GAAK,WAGvFmF,EAAM,mBAAuBI,GAAG,CAAC,kBAAkB,WAE/C,OADAjB,IACOa,EAAM,qBAEjBA,EAAM,mBAAuBI,GAAG,CAAC,eAAe,YAAkB,IAAfd,EAAc,EAAdA,QAC/C,EAAeD,EAAmBC,GAAlC,mBAAOzE,EAAP,KAAUC,EAAV,KACA/B,EAAKgE,IAAI,CAAEyB,GAAI3D,EAAG4D,GAAI3D,IAAKgC,YAC3B,IAAMwB,EAAKvF,EAAKuF,GACVC,EAAKxF,EAAKwF,GACVuB,EAAM9C,KAAK+C,MAAOjF,EAAIyD,EAAM1D,EAAIyD,GAEtCvF,EAAK2F,SAAS3B,IAAI,CACd5B,KAAMN,EAAI,EAAImC,KAAKC,IAAI6C,GACvB5E,IAAKJ,EAAI,EAAIkC,KAAKG,IAAI2C,GACtBlB,MAAa,IAANkB,EAAY9C,KAAKE,GAAK,KAC9BJ,YAEHjE,EAAOmI,WAAWjI,GAAMsE,eAE5B2C,EAAM,mBAAuBI,GAAG,CAAC,cAAc,WAC3C,OAAOJ,EAAM,kBAEjBA,EAAM,kBAAsBI,GAAG,CAAC,cAAc,WAC1C,OAAOJ,EAAM,kBAEjBA,EAAM,eAAmBI,GAAG,CAAC,cAAc,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQf,EAAc,EAAdA,QAClDH,IACA,IAAQlG,EAAeoH,EAAO/E,KAAtBrC,WAKR,GAJIoH,EAAOnE,eACPmE,EAAOnE,gBAEXrD,EAAOmI,WAAWX,GACbtF,EAAMpB,YAAYV,IAAgB8B,EAAMnB,mBAAmBX,GAAhE,CAEA,MAAeoG,EAAmBC,GAAlC,mBAAOzE,EAAP,KAAUC,EAAV,KACAmG,OAAOC,QAAPD,OAAA,IAAAA,QAAA,IAAAA,CAAA,GAAmBlG,EAAMpB,YAAYV,IAAgB8B,EAAMnB,mBAAmBX,KAAekD,SAAQ,YAAsB,IAAD,mBAC9GpD,GAD8G,UAC1FG,KAApBH,MACRA,EAAKgE,IAAIhE,EAAKyH,MAAQvH,EAAa,CAAEuF,GAAI3D,EAAG4D,GAAI3D,GAAM,CAAEwD,GAAIzD,EAAG0D,GAAIzD,IAAKgC,YACxE,IAAMwB,EAAKvF,EAAKyH,MAAQvH,EAAaF,EAAKuF,GAAKvF,EAAKyF,GAC9CD,EAAKxF,EAAKyH,MAAQvH,EAAaF,EAAKwF,GAAKxF,EAAK0F,GAC9CqB,EAAM9C,KAAK+C,MAAOjF,EAAIyD,EAAM1D,EAAIyD,GAEtCvF,EAAK2F,SAAS3B,IAAI,CACd5B,KAAOpC,EAAKyH,MAAQvH,EAAa4B,EAAI,EAAImC,KAAKC,IAAI6C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKG,IAAI2C,EAAM9C,MAAQ,GAAmCA,KAAKG,IAAI2C,IAClKxB,EAAK,EAAItB,KAAKC,IAAI6C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKG,IAAI2C,EAAM9C,MAAQ,GAAmCA,KAAKG,IAAI2C,IAC1I5E,IAAMnC,EAAKyH,MAAQvH,EAAa6B,EAAI,EAAIkC,KAAKG,IAAI2C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKC,IAAI6C,GAAO,GAAK9C,KAAKC,IAAI6C,IAC5HvB,EAAK,EAAIvB,KAAKG,IAAI2C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKC,IAAI6C,GAAO,GAAK9C,KAAKC,IAAI6C,IACrGlB,MAAO7F,EAAKyH,MAAQvH,EAAmB,IAAN6G,EAAY9C,KAAKE,GAAK,GAAW,IAAN4C,EAAY9C,KAAKE,GAAK,KACnFJ,YACHjE,EAAOmI,WAAWjI,GAClBF,EAAOmI,WAAWjI,EAAK2F,aAG3B7F,EAAOwE,gBAEX2C,EAAM,eAAmBI,GAAG,CAAC,OAAO,WAChC,IAAQnH,EAAeH,EAASwC,KAAxBrC,WACR,cAAmB4D,EAAU/D,IAAtB+B,EAAP,KAAUC,EAAV,KACA,OAAKC,EAAMpB,YAAYV,IACvBgI,OAAOC,QAAPD,OAAA,IAAAA,QAAA,IAAAA,CAAA,GAAmBlG,EAAMpB,YAAYV,IAAgB8B,EAAMnB,mBAAmBX,KAAekD,SAAQ,YAAsB,IAAD,mBAC9GpD,GAD8G,UAC1FG,KAApBH,MACRA,EAAKgE,IAAIhE,EAAKyH,MAAQvH,EAAa,CAAEuF,GAAI3D,EAAG4D,GAAI3D,GAAM,CAAEwD,GAAIzD,EAAG0D,GAAIzD,IAAKgC,YACxEjE,EAAOmI,WAAWjI,GAClBA,EAAKgE,IAAIhE,EAAKyH,MAAQvH,EAAa,CAAEuF,GAAI3D,EAAG4D,GAAI3D,GAAM,CAAEwD,GAAIzD,EAAG0D,GAAIzD,IAAKgC,YACxE,IAAMwB,EAAKvF,EAAKyH,MAAQvH,EAAaF,EAAKuF,GAAKvF,EAAKyF,GAC9CD,EAAKxF,EAAKyH,MAAQvH,EAAaF,EAAKwF,GAAKxF,EAAK0F,GAC9CqB,EAAM9C,KAAK+C,MAAOjF,EAAIyD,EAAM1D,EAAIyD,GACtCvF,EAAK2F,SAAS3B,IAAI,CACd5B,KAAOpC,EAAKyH,MAAQvH,EAAa4B,EAAI,EAAImC,KAAKC,IAAI6C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKG,IAAI2C,EAAM9C,MAAQ,GAAmCA,KAAKG,IAAI2C,IAClKxB,EAAK,EAAItB,KAAKC,IAAI6C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKG,IAAI2C,EAAM9C,MAAQ,GAAmCA,KAAKG,IAAI2C,IAC1I5E,IAAMnC,EAAKyH,MAAQvH,EAAa6B,EAAI,EAAIkC,KAAKG,IAAI2C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKC,IAAI6C,GAAO,GAAK9C,KAAKC,IAAI6C,IAC5HvB,EAAK,EAAIvB,KAAKG,IAAI2C,IAAQ/G,EAAKoF,QAAU,GAAKnB,KAAK6C,KAAK,GAAK,IAAM7C,KAAKC,IAAI6C,GAAO,GAAK9C,KAAKC,IAAI6C,IACrGlB,MAAO7F,EAAKyH,MAAQvH,EAAmB,IAAN6G,EAAY9C,KAAKE,GAAK,GAAW,IAAN4C,EAAY9C,KAAKE,GAAK,KACnFJ,YAMHjE,EAAOmI,WAAWjI,EAAK2F,aAEvB5F,EAASoD,eACTpD,EAASoD,gBAEbrD,EAAOwE,YACA2C,EAAM,mBA3B8BA,EAAM,qBAmErD,IAAMmB,EAAe,SAACzB,GAClB,IAAI7D,EAAQ6D,EAAM7D,MACdE,EAAS,IAAIC,SAAOC,OAAO,CAC3BjB,OAAQ,EACRC,KAAK,OAAD,OAAU,GAAGY,EAAO,GAApB,YAA2B,KAAKA,EAAM,GAAI,GAA1C,YAAiD,KAAKA,EAAM,GAAI,GAAhE,KACJX,IAAKwE,EAAMnB,GACXpD,KAAMuE,EAAMpB,KAIhB,OADAzF,EAAO+C,IAAIG,GACJA,GAGX,SAASqF,IACL,IAAMC,EAAS,GACTC,EAAe,GAmBrB,OAlBAL,OAAOC,QAAQnG,EAAMrB,OAAO6C,QAAO,oDAAOrD,KAAQqC,KAAeY,SAAQ,YAAgB,IAAD,mBAAboF,EAAa,UACpFd,QAAQC,IAAIO,OAAOC,QAAQnG,EAAMnB,mBAAmB2H,KACjDN,OAAOC,QAAQnG,EAAMnB,mBAAmB2H,IAAUC,OAAM,YAA2B,IAAD,mBAAxBX,EAAwB,KAAX9H,EAAW,KAAnBG,KAAQH,KAEhE0C,EADOV,EAAMrB,MAAMmH,GAAK3H,KAAKqC,EACfE,OAAOc,QAAO,qBAAGV,OAAqB9C,EAAK8C,SAE/D,OADIyF,EAAaT,KAAKS,EAAaT,GAAK,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IACxDpF,EAAOK,OAAO,GAAGwF,EAAaT,GAAK9H,EAAK8C,WAG3CoF,OAAOC,QAAQnG,EAAMnB,mBAAmB2H,IAAUpF,SAAQ,YAA2B,IAAD,mBAAxB0E,EAAwB,KAAX9H,EAAW,KAAnBG,KAAQH,KAE/D0C,EADOV,EAAMrB,MAAMmH,GAAK3H,KAAKqC,EACfE,OAAOc,QAAO,qBAAGV,OAAqB9C,EAAK8C,SAC/DwF,EAAOpH,KAAK,CAACwB,EAAO6F,EAAaT,GAAK9H,EAAK8C,QAAQE,OAAQhD,EAAMwI,EAAQV,IACzES,EAAaT,GAAK9H,EAAK8C,eAK5BwF,E,SAKII,E,kFAAf,WAAyBhC,EAAO1G,EAAK2I,GAArC,SAAAC,EAAA,+EAEW,IAAIC,SAAQ,SAAUnJ,GACzB,IAAIkH,EAAQ,EACNkC,EAAWC,aAAY,WALjB,KAMJnC,IACAoC,cAAcF,GACdhJ,EAAOuG,OAAOK,GAAOpC,YACrBxE,EAAOuE,aAAarC,EAAMrB,MAAMgI,GAAMxI,KAAKoC,MAC3C7C,KAGJ+G,EAAUC,EAAO1G,EAAM4G,OACxB,QAbX,4C,kEAgBA,8BAAAgC,EAAA,yDAEYK,EAAeZ,IAEfa,EAAQD,EAAaE,KAAI,4DAAyB3F,QAAO,SAACmF,EAAMpH,EAAG6H,GAAV,OAAkBA,EAAIC,QAAQV,IAASpH,KASzE,GAAvB0H,EAAalG,OAbzB,mEAcc8F,QAAQS,IAAIL,EAAaE,IAAb,+BAAAP,EAAA,MAAiB,qCAAAA,EAAA,gFAAOlC,EAAP,KAAc1G,EAAd,KAAoB2I,EAApB,KAA0BvH,EAA1B,cACzBsH,EAAUhC,EAAO1G,EAAM2I,GADE,OAE/B3G,EAAMrB,MAAMS,GAAQjB,KAAKqC,EAAE+G,YAAYvJ,EAAK8C,OAFb,2CAAjB,wDAd1B,uBAmB8B+F,QAAQS,IAAIJ,EAAMC,KAAI,SAAAR,GAAI,OAAET,OAAOC,QAAQnG,EAAMpB,YAAY+H,IAAOQ,IAAxC,iBAAAjB,OAAA,IAAAA,CAAA,UAA6C,mCAAAU,EAAA,gFAAQxH,EAAR,KAAsBpB,EAAtB,KAAgBG,KAAMH,KAEvGgD,EAASoF,EAAapI,GAF2D,SAIjF0I,EAAU1F,EAAOhD,EAAK2I,GAJ2D,gCAKhF,CAAC3I,EAAK8C,MAAM1B,IALoE,2CAA7C,0DAOhDoI,QA1BV,cA2BgBpG,SAAQ,YAAmB,IAAD,mBAAhBN,EAAgB,KAAV1B,EAAU,KAC9BY,EAAMrB,MAAMS,GAAQjB,KAAKqC,EAAEwF,SAASlF,MA5BhD,4D,sBAiCe,OACX2G,iBA7HJ,SAA0BC,GAEtB5J,EAAS4J,EACT,IAAIC,EAAe1C,EAAM,kBACzBnH,EAAOuH,GAAG,cAAc,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQf,EAAc,EAAdA,QAC3Be,IAAWA,EAAO/E,OACtBoH,EAAeA,EAAaC,KAAb,eACXtC,IAASvH,EACL,WACJuH,GAAQA,EAAO/E,KACX,OACA,WACJ,CAAE+E,SAAQf,gBAGlBzG,EAAOuH,GAAG,cAAc,YAAkB,IAAfd,EAAc,EAAdA,QACvBoD,EAAeA,EAAaC,KAAb,aAAgC,CAAErD,eAErDzG,EAAOuH,GAAG,iBAAiB,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQf,EAAc,EAAdA,QAC9Be,IAAWA,EAAO/E,OACtBoH,EAAeA,EAAaC,KAAK,YAAa,CAAEtC,SAAQf,gBAG5DzG,EAAOuH,GAAG,YAAY,YAAkB,IAAfd,EAAc,EAAdA,QACrBoD,EAAeA,EAAaC,KAAb,KAAwB,CAAErD,YAEzCsD,SAASC,UAAY,SAASxK,GAC1BuF,EAAW3D,KAAK5B,EAAEwI,KAClB6B,EAAeA,EAAaC,KAAb,cAAiC,CAAE9B,IAAKxI,EAAEwI,OAE7D+B,SAASE,QAAU,SAASzK,GACxBuF,EAAaA,EAAWrB,QAAO,SAAAwG,GAAG,OAAI1K,EAAEwI,MAAQkC,W,OIvT7C,SAASC,IACtBC,qBAAU,WACR,IAAIC,EAAYC,IAChBC,EAAmBZ,iBAAiBU,KACnC,IACH,IAAMC,EAAa,kBACjB,IAAInH,SAAOqH,OAAO,SAAU,CAC1BnF,OAAQ,IACRD,MAAO,KACPqF,gBAAiB,QACjBC,WAAU,EACVC,wBAAwB,KAG5B,OACE,gCACE,2EACA,wBAAQ5K,GAAG,cCfF6K,MAJf,WACE,OAAQ,cAACT,EAAD,KCAVU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASiB,eAAe,W","file":"static/js/main.2c41bc23.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 19;","import { fabric } from 'fabric';\r\nimport { createIncrementalCompilerHost } from 'typescript';\r\nimport { Graph, BaseNode } from '../simple_graphs'\r\nimport { Node } from './nodes';\r\nimport { State } from './utils/StateMachine'\r\nlet graph = new Graph();\r\nlet nodeCount = 0;\r\nlet canvas;\r\nlet selected;\r\nlet line;\r\nlet keyPressed = [];\r\nconst createNode = (x, y) => {\r\n    let gn = keyPressed.includes(\"a\") ?\r\n        new fabric.Rect({\r\n            width: 40,\r\n            height: 40,\r\n            fill: 'red',\r\n            top: y - 20,\r\n            left: x - 20,\r\n            hasBorders: false,\r\n            hasControls: false\r\n        }) :\r\n        new Node(x, y, graph, canvas);\r\n    gn.isRect = keyPressed.includes(\"a\");\r\n    if (gn.isRect) {\r\n        let nn = new BaseNode(nodeCount++, { x, y ,node:gn});\r\n        graph.addV(nn);\r\n        gn.node = nn;\r\n    }\r\n    gn.tokens = [];\r\n    canvas.add(gn)\r\n    return gn;\r\n}\r\n\r\nconst createLine = ([x1, y1, x2, y2], color) => {\r\n    var triangle = new fabric.Triangle({\r\n        width: 10,\r\n        height: 15,\r\n        fill: `rgb(${(17%color)*30},${(17%(+color+2))*30},${(17%(+color+4))*30})`,\r\n        left: x2,\r\n        top: y2,\r\n        angle: Math.atan((x2 - x1) / (y2 - y1)) * 180 / Math.PI,\r\n        hasBorders: false,\r\n        hasas: false,\r\n        evented: false,\r\n        selectable: false\r\n    });\r\n    const line = new fabric.Line([x1, y1, x2, y2], {\r\n        stroke: `rgb(${(17%color)*30},${(17%(+color+2))*30},${(17%(+color+4))*30})`,\r\n        hasBorders: false,\r\n        hasas: false,\r\n        evented: false,\r\n        selectable: false\r\n    });\r\n    line.triangle = triangle;\r\n    line.color = color||0;\r\n    canvas.add(line);\r\n    canvas.add(triangle);\r\n    return line;\r\n\r\n}\r\nconst getCentre = (circle) => {\r\n    let { tl, br } = circle.aCoords;\r\n    return [\r\n        (tl.x + br.x) / 2,\r\n        (tl.y + br.y) / 2\r\n    ]\r\n\r\n}\r\nconst deleteLine = () => {\r\n    if (line) {\r\n        canvas.remove(line.triangle);\r\n        canvas.remove(line).renderAll();\r\n    }\r\n    line = null;\r\n}\r\nconst adjastMousePointer = (pointer) => {\r\n    return [Math.floor(pointer.x) - 2, Math.floor(pointer.y) - 2];\r\n}\r\n\r\nconst moveToken = (token, line2, frame) => {\r\n    const x1 = line2.x1;\r\n    const x2 = line2.x2;\r\n    const y1 = line2.y1;\r\n    const y2 = line2.y2;\r\n    const len = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n    const move = len / 100 * frame;\r\n    const ang = Math.atan2((y2 - y1), (x2 - x1))\r\n    token.set({\r\n        top: move * Math.sin(ang) - 5 * Math.cos(ang) + y1,\r\n        left: move * Math.cos(ang) + 5 * Math.sin(ang) + x1\r\n    }).setCoords();\r\n    canvas.renderAll();\r\n}\r\n\r\n\r\n//======================================================================\r\nconst statesNames = [\r\n    \"objectNotSelected\",\r\n    \"objectSelectedNode\",\r\n    \"objectDragging\",\r\n    \"ctrlPressed\",\r\n]\r\nconst states = statesNames.reduce((acc, state) => {\r\n    acc[state] = new State();\r\n    return acc;\r\n}, {});\r\n\r\n\r\n\r\nstates[\"objectNotSelected\"].on([\"down:nothing\", \"down:node\", \"down:selected\"], ({ pointer, target }) => {\r\n\r\n\r\n    selected = target;\r\n    if (!selected) selected = createNode(Math.floor(pointer.x), Math.floor(pointer.y));\r\n    line = createLine([...getCentre(selected), Math.floor(pointer.x) - 2, Math.floor(pointer.y) - 2], keyPressed.find(x => x >= '0' && x <= '9'));\r\n    return states[\"objectSelectedNode\"];\r\n\r\n}); //======\r\nstates[\"objectSelectedNode\"].on([\"down:nothing\"], ({ target, pointer }) => {\r\n    if ((selected.isRect && !keyPressed.includes(\"a\")) || (!selected.isRect && keyPressed.includes(\"a\"))) {\r\n        let newNode = createNode(...adjastMousePointer(pointer));\r\n\r\n        const [x, y] = getCentre(newNode);\r\n\r\n        line.end = newNode.node.identifier;\r\n        line.set({ x2: x, y2: y }).setCoords();\r\n        const x1 = line.x1;\r\n        const y1 = line.y1;\r\n        //console.log(x1, y1);\r\n        const ang = Math.atan2((y - y1), (x - x1));\r\n        line.triangle.set({\r\n            left: x + 5 * Math.sin(ang) - (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.cos(ang) : 25 /*10(radius) + 15(triangle)*/ * Math.cos(ang)),\r\n            top: y - 5 * Math.cos(ang) - (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.sin(ang) : 25 * Math.sin(ang)),\r\n            angle: ang * 180 / Math.PI + 90\r\n        }).setCoords();\r\n        //console.log(line.triangle.top, line.triangle.left);\r\n\r\n        graph.connect(selected.node.identifier, newNode.node.identifier, {\r\n            line\r\n        });\r\n\r\n        canvas.renderAll();\r\n        selected = newNode;\r\n        line = createLine([...getCentre(selected), Math.floor(pointer.x) - 2, Math.floor(pointer.y) - 2], keyPressed.find(x => x >= '0' && x <= '9'));\r\n    }\r\n}); //======\r\nstates[\"objectSelectedNode\"].on([\"down:node\"], ({ target }) => {\r\n    console.log(1);\r\n    if ((selected.isRect && !target.isRect) || (!selected.isRect && target.isRect)) {\r\n        const [x, y] = getCentre(target);\r\n        const tId = target.node.identifier;\r\n        const sId = selected.node.identifier;\r\n        if (graph.connections[tId] && sId in graph.connections[tId]) {\r\n            deleteLine();\r\n            canvas.remove(graph.connections[tId][sId].data.line);\r\n            canvas.remove(graph.connections[tId][sId].data.line.triangle);\r\n            graph.disconnect(tId, sId);\r\n            return states[\"objectNotSelected\"];\r\n        }\r\n        if (graph.inboundConnections[tId] && sId in graph.inboundConnections[tId]) {\r\n            deleteLine();\r\n            return states[\"objectNotSelected\"];\r\n        }\r\n\r\n        line.end = target.node.identifier\r\n\r\n        line.set({ x2: x, y2: y }).setCoords();\r\n        const x1 = line.x1;\r\n        const y1 = line.y1;\r\n        const ang = Math.atan2((y - y1), (x - x1));\r\n        line.triangle.set({\r\n            left: x + 5 * Math.sin(ang) - (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.cos(ang) : 25 /*10(radius) + 15(triangle)*/ * Math.cos(ang)),\r\n            top: y - 5 * Math.cos(ang) - (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.sin(ang) : 25 * Math.sin(ang)),\r\n            angle: ang * 180 / Math.PI + 90\r\n        }).setCoords();\r\n\r\n        canvas.renderAll();\r\n\r\n        graph.connect(selected.node.identifier, target.node.identifier, {\r\n            line\r\n        });\r\n        return states[\"objectNotSelected\"];\r\n    }\r\n}); //=======\r\nstates[\"objectNotSelected\"].on([\"key:pressed\"], ({ key }) => {\r\n    if (key === \"q\") {\r\n        simulation();\r\n    }\r\n});\r\nstates[\"objectSelectedNode\"].on([\"key:pressed\"], ({ key }) => {\r\n    if (key === \" \") {\r\n        if (selected.addToken) selected.addToken(keyPressed.find(x => x >= '0' && x <= '9'));\r\n    }\r\n});\r\nstates[\"objectSelectedNode\"].on([\"down:selected\"], () => {\r\n    deleteLine();\r\n    return states[\"objectNotSelected\"];\r\n});\r\nstates[\"objectSelectedNode\"].on([\"move:mouse\"], ({ pointer }) => {\r\n    const [x, y] = adjastMousePointer(pointer);\r\n    line.set({ x2: x, y2: y }).setCoords();\r\n    const x1 = line.x1;\r\n    const y1 = line.y1;\r\n    const ang = Math.atan2((y - y1), (x - x1));\r\n    \r\n    line.triangle.set({\r\n        left: x + 5 * Math.sin(ang), // - 10 * Math.sqrt(2) * Math.cos(ang),\r\n        top: y - 5 * Math.cos(ang), // - 10 * Math.sqrt(2) * Math.sin(ang),\r\n        angle: ang * 180 / Math.PI + 90\r\n    }).setCoords();\r\n    //line.triangle.setAngle(90);\r\n    canvas.sendToBack(line).renderAll();\r\n});\r\nstates[\"objectSelectedNode\"].on([\"move:node\"], () => {\r\n    return states[\"objectDragging\"];\r\n});\r\nstates[\"objectNotSelected\"].on([\"move:node\"], () => {\r\n    return states[\"objectDragging\"];\r\n});\r\nstates[\"objectDragging\"].on([\"move:node\"], ({ target, pointer }) => {\r\n    deleteLine();\r\n    const { identifier } = target.node;\r\n    if (target._updateTokens) {\r\n        target._updateTokens();\r\n    }\r\n    canvas.sendToBack(target);\r\n    if (!graph.connections[identifier] && !graph.inboundConnections[identifier]) return;\r\n\r\n    const [x, y] = adjastMousePointer(pointer);\r\n    Object.entries({...graph.connections[identifier], ...graph.inboundConnections[identifier] }).forEach(([_, connection]) => {\r\n        const { line } = connection.data;\r\n        line.set(line.end === identifier ? { x2: x, y2: y } : { x1: x, y1: y }).setCoords();\r\n        const x1 = line.end === identifier ? line.x1 : line.x2;\r\n        const y1 = line.end === identifier ? line.y1 : line.y2;\r\n        const ang = Math.atan2((y - y1), (x - x1));\r\n        \r\n        line.triangle.set({\r\n            left: (line.end === identifier ? x + 5 * Math.sin(ang) - (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.cos(ang - Math) : 25 /*10(radius) + 15(triangle)*/ * Math.cos(ang)) :\r\n                x1 - 5 * Math.sin(ang) + (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.cos(ang - Math) : 25 /*10(radius) + 15(triangle)*/ * Math.cos(ang))),\r\n            top: (line.end === identifier ? y - 5 * Math.cos(ang) - (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.sin(ang) : 25 * Math.sin(ang)) :\r\n                y1 + 5 * Math.cos(ang) + (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.sin(ang) : 25 * Math.sin(ang))),\r\n            angle: line.end === identifier ? ang * 180 / Math.PI + 90 : ang * 180 / Math.PI - 90,\r\n        }).setCoords();\r\n        canvas.sendToBack(line);\r\n        canvas.sendToBack(line.triangle);\r\n    });\r\n\r\n    canvas.renderAll();\r\n});\r\nstates[\"objectDragging\"].on([\"up\"], () => {\r\n    const { identifier } = selected.node;\r\n    const [x, y] = [...getCentre(selected)]\r\n    if (!graph.connections[identifier]) return states[\"objectNotSelected\"];\r\n    Object.entries({...graph.connections[identifier], ...graph.inboundConnections[identifier] }).forEach(([_, connection]) => {\r\n        const { line } = connection.data;\r\n        line.set(line.end === identifier ? { x2: x, y2: y } : { x1: x, y1: y }).setCoords();\r\n        canvas.sendToBack(line)\r\n        line.set(line.end === identifier ? { x2: x, y2: y } : { x1: x, y1: y }).setCoords();\r\n        const x1 = line.end === identifier ? line.x1 : line.x2;\r\n        const y1 = line.end === identifier ? line.y1 : line.y2;\r\n        const ang = Math.atan2((y - y1), (x - x1));\r\n        line.triangle.set({\r\n            left: (line.end === identifier ? x + 5 * Math.sin(ang) - (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.cos(ang - Math) : 25 /*10(radius) + 15(triangle)*/ * Math.cos(ang)) :\r\n                x1 - 5 * Math.sin(ang) + (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.cos(ang - Math) : 25 /*10(radius) + 15(triangle)*/ * Math.cos(ang))),\r\n            top: (line.end === identifier ? y - 5 * Math.cos(ang) - (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.sin(ang) : 25 * Math.sin(ang)) :\r\n                y1 + 5 * Math.cos(ang) + (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.sin(ang) : 25 * Math.sin(ang))),\r\n            angle: line.end === identifier ? ang * 180 / Math.PI + 90 : ang * 180 / Math.PI - 90,\r\n        }).setCoords();\r\n        //line.triangle.set({\r\n        //    left: line.end == identifier ? x + 5 * Math.sin(ang) - (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.cos(ang) : 25 /*10(radius) + 15(triangle)*/ * Math.cos(ang)) : x2,\r\n        //    top: line.end == identifier ? y - 5 * Math.cos(ang) - (line.isRect ? (10 * Math.sqrt(2) + 15) * Math.sin(ang) : 25 * Math.sin(ang)) : y2,\r\n        //    angle: line.end == identifier ? ang * 180 / Math.PI + 90 : ang * 180 / Math.PI - 90,\r\n        //}).setCoords();\r\n        canvas.sendToBack(line.triangle);\r\n    });\r\n    if (selected._updateTokens) {\r\n        selected._updateTokens();\r\n    }\r\n    canvas.renderAll();\r\n    return states[\"objectNotSelected\"];\r\n})\r\n\r\n//=========================================================================\r\nfunction initializeEvents(_canvas) {\r\n\r\n    canvas = _canvas;\r\n    let currentState = states[\"objectNotSelected\"];\r\n    canvas.on('mouse:down', ({ target, pointer }) => {\r\n        if (target && !target.node) return;\r\n        currentState = currentState.pass(`down:${\r\n            target===selected?\r\n                \"selected\":\r\n            target&&target.node?\r\n                \"node\":\r\n                \"nothing\"\r\n        }`, { target, pointer });\r\n    });\r\n\r\n    canvas.on('mouse:move', ({ pointer }) => {\r\n        currentState = currentState.pass(`move:mouse`, { pointer });\r\n    });\r\n    canvas.on('object:moving', ({ target, pointer }) => {\r\n        if (target && !target.node) return;\r\n        currentState = currentState.pass(\"move:node\", { target, pointer })\r\n    });\r\n\r\n    canvas.on('mouse:up', ({ pointer }) => {\r\n        currentState = currentState.pass(`up`, { pointer });\r\n\r\n        document.onkeydown = function(e) {\r\n            keyPressed.push(e.key);\r\n            currentState = currentState.pass(`key:pressed`, { key: e.key });\r\n        }\r\n        document.onkeyup = function(e) {\r\n            keyPressed = keyPressed.filter(val => e.key !== val);\r\n        }\r\n    });\r\n}\r\n\r\nconst createCircle = (line2) => {\r\n    let color = line2.color;\r\n    let circle = new fabric.Circle({\r\n        radius: 5,\r\n        fill: `rgb(${(17%color)*30},${(17%(+color+2))*30},${(17%(+color+4))*30})`,\r\n        top: line2.y1,\r\n        left: line2.x1,\r\n\r\n    })\r\n    canvas.add(circle);\r\n    return circle;\r\n}\r\n\r\nfunction step1() {\r\n    const result = [];\r\n    const vertexColors = {};\r\n    Object.entries(graph.nodes).filter(([_, { data: { n } }]) => !n).forEach(([vertex2,_])=>{\r\n        console.log(Object.entries(graph.inboundConnections[vertex2]))\r\n        if(Object.entries(graph.inboundConnections[vertex2]).every(([key,{data: { line }}])=>{\r\n            const node = graph.nodes[key].data.n;\r\n            const tokens = node.tokens.filter(({ color }) => color == line.color);\r\n            if(!vertexColors[key])vertexColors[key]=[0,0,0,0,0,0,0,0,0,0];\r\n            if(tokens.length-1>=vertexColors[key][line.color])return true;\r\n            return false;\r\n        })){\r\n            Object.entries(graph.inboundConnections[vertex2]).forEach(([key,{data: { line }}])=>{\r\n                const node = graph.nodes[key].data.n;\r\n                const tokens = node.tokens.filter(({ color }) => color == line.color);\r\n                result.push([tokens[vertexColors[key][line.color]].circle, line, vertex2,key]);\r\n                vertexColors[key][line.color]++;\r\n            });\r\n        }\r\n\r\n    });        \r\n    return result;\r\n}\r\n\r\n\r\nconst FRAME_COUNT = 100;\r\nasync function greatMove(token, line,dest) {\r\n\r\n    return new Promise(function (resolve){\r\n        let frame = 0;\r\n        const interval = setInterval(() => {\r\n            if (frame == FRAME_COUNT) {\r\n                clearInterval(interval);\r\n                canvas.remove(token).renderAll();\r\n                canvas.bringToFront(graph.nodes[dest].data.node);\r\n                resolve();\r\n            };\r\n            //console.log(frame,token,line);\r\n            moveToken(token, line, frame++);\r\n        }, 40);\r\n    });\r\n}\r\nasync function simulation() {\r\n    while (true) {\r\n        let associations = step1();\r\n        \r\n        let dests = associations.map(([_, __, dest]) => dest).filter((dest, i, arr) => arr.indexOf(dest) == i);\r\n        /*dests.forEach(dest => {\r\n            let assoc = associations;\r\n            const vertexes = Object.keys(graph.inboundConnections[dest]);\r\n            if (assoc.filter(([_, __, d]) => d == dest).length != vertexes.length) {\r\n                associations = associations.filter(([_, __, d]) => d != dest);\r\n                dests = dests.filter( d=>d != dest);\r\n            };\r\n        });*/\r\n        if (associations.length == 0) break;\r\n        await Promise.all(associations.map(async([token, line, dest, vertex]) => {\r\n            await greatMove(token, line, dest);\r\n            graph.nodes[vertex].data.n.removeToken(line.color);\r\n        }));\r\n        \r\n        const results = await Promise.all(dests.map(dest=>Object.entries(graph.connections[dest]).map( async ([vertex,{data:{line}}])=>{\r\n                \r\n                const circle = createCircle(line);\r\n                \r\n                await greatMove(circle,line,dest);\r\n                return [line.color,vertex];\r\n            })\r\n        ).flat());\r\n        results.forEach(([color,vertex])=>{\r\n            graph.nodes[vertex].data.n.addToken(color)\r\n        });\r\n    }\r\n\r\n}\r\nexport default {\r\n    initializeEvents\r\n}","import {IBaseConnection,IBaseNode,IBaseGraph} from './interfaces';\r\n\r\nexport class BaseNode implements IBaseNode{\r\n    identifier:string;\r\n    data?:any;\r\n    constructor(identifier:string=\"\",data?:any){\r\n        this.identifier=identifier;\r\n        this.data=data;\r\n    }\r\n}\r\nexport class BaseConnection implements IBaseConnection<BaseNode>{\r\n    \r\n    node0:BaseNode;\r\n    node1:BaseNode;\r\n    data?:any;\r\n    constructor(n0:BaseNode,n1:BaseNode,data?:any){\r\n        this.node0=n0;\r\n        this.node1=n1;\r\n        this.data=data;\r\n    }\r\n}\r\n//directed but not multigraph\r\nexport abstract class BaseGraph<Node extends IBaseNode,Connection extends IBaseConnection<Node>> implements IBaseGraph<Node,Connection>{\r\n    public nodes:{[name:string]:Node}={};\r\n    public connections:{[v1:string]:{[v2:string]:Connection}}={};\r\n    public inboundConnections:{[v1:string]:{[v2:string]:Connection}}={};\r\n    \r\n    neighbours(id1:string):Node[]{\r\n        let cons = this.connections;\r\n        if(!(id1 in cons))return [];//maybe should throw error\r\n        let res:Node[] = [];\r\n        for(let v2 in cons[id1])res.push(this.nodes[v2]);\r\n        return res;\r\n    }\r\n    connected(id1:string,id2:string):boolean{\r\n        let cons = this.connections;\r\n        if(!(id1 in cons))return false;//maybe should throw error\r\n        return !!cons[id1][id2];\r\n    }\r\n    getConnection(id1:string,id2:string):Connection|null{\r\n        let cons = this.connections;\r\n        if(!(id1 in cons))return null;\r\n        return cons[id1][id2];\r\n    }\r\n\r\n    deleteV(id1:string){\r\n        let cons = this.connections;\r\n        if(!(id1 in this.nodes))return;\r\n        delete this.nodes[id1];\r\n        delete cons[id1];\r\n    }\r\n    addV(vertex:Node){\r\n        this.nodes[vertex.identifier]=vertex;\r\n    }\r\n    \r\n    connect(id1:string,id2:string,data?:any){\r\n        if(!(id1 in this.nodes && id2 in this.nodes))return;\r\n        this.connections[id2] = this.connections[id2] || {}\r\n        this.connections[id1] = this.connections[id1] || {}\r\n        this.connections[id1][id2]=this.createConnection(this.nodes[id1],this.nodes[id2],data);\r\n        this.inboundConnections[id2] = this.inboundConnections[id2] || {}\r\n        this.inboundConnections[id1] = this.inboundConnections[id1] || {}\r\n        this.inboundConnections[id2][id1]=this.connections[id1][id2];\r\n    }\r\n    abstract createConnection(n0:Node,n1:Node,data?:any):Connection;\r\n    disconnect(id1:string,id2:string){\r\n        let cons = this.connections;\r\n        if(!(id1 in cons && id2 in cons[id1]))return;\r\n        delete this.connections[id1][id2];\r\n        delete this.inboundConnections[id2][id1]\r\n    }\r\n\r\n    contrapt(id1:string,id2:string){\r\n        let cons = this.connections;\r\n        let icons = this.inboundConnections;\r\n        if(!(id1 in cons && id2 in cons[id1]))return;\r\n        this.disconnect(id1,id2);\r\n        this.disconnect(id2,id1);\r\n        for(let i in cons[id2])this.connect(id1,i);\r\n        for(let i in icons[id2])this.connect(i,id1);\r\n        this.deleteV(id2);\r\n    }\r\n    GED(other:IBaseGraph<Node,Connection>):number{\r\n        return 0;\r\n    }\r\n}\r\nexport class Graph extends BaseGraph<BaseNode,BaseConnection>{\r\n    createConnection(n0:BaseNode,n1:BaseNode,data?:any):BaseConnection{\r\n        return new BaseConnection(n0,n1,data);\r\n    }\r\n};","import { fabric } from 'fabric';\nimport { NonDirectionalGraph, BaseNode } from '../simple_graphs'\n\nlet nodeCount = 1000;\n\nconst getCentre = (circle) => {\n    let { tl, br } = circle.aCoords;\n    return [\n        (tl.x + br.x) / 2,\n        (tl.y + br.y) / 2\n    ]\n\n}\n\nexport class Node extends fabric.Circle {\n    constructor(x, y, graph, canvas) {\n        super({\n            radius: 20,\n            fill: 'green',\n            top: y - 20,\n            left: x - 20,\n            hasBorders: false,\n            hasControls: false,\n        });\n        this.node = new BaseNode(nodeCount++, { x, y, n: this });\n        graph.addV(this.node);\n        this.tokens = [];\n        this.centreX = x;\n        this.centreY = y;\n        this.canvas = canvas;\n        canvas.add(this);\n    }\n    addToken(color=0) {\n        if (this.tokens.length == 6) return;\n        this.tokens.push({\n            circle: new fabric.Circle({\n                radius: 5,\n                fill: `rgb(${(17%color)*30},${(17%(+color+2))*30},${(17%(+color+4))*30})`,\n                top: 10,\n                left: 10,\n                //hasBorders: false,\n                //evented: false,\n                //selectable: false\n            }),\n            color\n        });\n        this._updateTokens();\n        this.tokens.forEach(({ circle }) => this.canvas.add(circle))\n    }\n    removeToken(c){\n        const number = this.tokens.findIndex(({color})=>c==color)\n        this.tokens = this.tokens.filter((_, index) => index != number);\n    }\n    _updateTokens() {\n        const [x, y] = getCentre(this);\n        this.setCoords();\n        this.tokens.forEach(({ circle }, i) => {\n            circle.set({\n                left: x - 5 + Math.sin(2 * Math.PI * i / (this.tokens.length)) * 10,\n                top: y - 5 + Math.cos(2 * Math.PI * i / (this.tokens.length)) * 10\n            }).setCoords();\n\n            this.canvas.bringToFront(circle);\n            this.canvas.renderAll();\n        });\n    }\n\n\n}","export class State{\r\n    handlers ={};\r\n    on(events,handler){\r\n        events.forEach(event => {\r\n            this.handlers[event] = handler;\r\n        });\r\n    }\r\n    pass(event,eventParams)\r\n    {\r\n        if(!this.handlers[event])return this;\r\n        return this.handlers[event](eventParams)||this;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fabric } from 'fabric';\r\nimport graphManipulations from './graphManipulatio'\r\n\r\nexport default function Graphical(){\r\n  useEffect(() => {\r\n    let newCanvas = initCanvas();\r\n    graphManipulations.initializeEvents(newCanvas);\r\n  }, []);\r\n  const initCanvas = () => (\r\n    new fabric.Canvas('canvas', {\r\n      height: 800,\r\n      width: 1600,\r\n      backgroundColor: 'white',\r\n      selection:false,\r\n      preserveObjectStacking: true \r\n    })\r\n  )\r\n  return(\r\n    <div>\r\n      <h1>Fabric.js on React - fabric.Canvas('...')</h1>\r\n      <canvas id=\"canvas\" />\r\n    </div>\r\n  );\r\n}","import Graphical from \"./components/graphical/graphical\";\n\nfunction App() {\n  return (<Graphical/>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}